<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:NOVisionDesigner.Designer.Windows"
    xmlns:fluent ="urn:fluent-ribbon"
    xmlns:misc="clr-namespace:NOVisionDesigner.Designer.Misc"
        xmlns:mahapp ="http://metro.mahapps.com/winfx/xaml/controls"
   
        xmlns:HalconDotNet="clr-namespace:HalconDotNet;assembly=halcondotnet" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" xmlns:UserControls="clr-namespace:NOVisionDesigner.UserControls" x:Name="window" x:Class="NOVisionDesigner.Designer.Windows.DrawRegionWindow"
        mc:Ignorable="d" Loaded="Window_Loaded" UseLayoutRounding="True"   FontFamily="Times New Roman" Height="642" Width="1000" Initialized="window_Initialized" Closed="window_Closed" Title="Region Editor"  >
    <Window.Resources>
        <misc:StringToColor x:Key="StringToColor"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <misc:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <SolidColorBrush x:Key="TabItemCloseButtonNormalBackgroundBrush" Color="#00000000" />
        <SolidColorBrush x:Key="TabItemCloseButtonNormalBorderBrush" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="TabItemCloseButtonNormalForegroundBrush" Color="#FF8f949b" />

        <SolidColorBrush x:Key="TabItemCloseButtonHoverBackgroundBrush" Color="#FFc13535" />
        <SolidColorBrush x:Key="TabItemCloseButtonHoverForegroundBrush" Color="#FFf9ebeb" />

        <SolidColorBrush x:Key="TabItemCloseButtonPressedBackgroundBrush" Color="#FF431e20" />
        <SolidColorBrush x:Key="TabItemCloseButtonPressedBorderBrush" Color="#FF110033" />
        <SolidColorBrush x:Key="TabItemCloseButtonPressedForegroundBrush" Color="#FFf9ebeb" />

        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels" Value="false" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Focusable" Value="False" />

            <!-- The control template. -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent">

                            <!-- The background of the button, as an ellipse. -->
                            <Ellipse x:Name="backgroundEllipse" />

                            <!-- A path that renders a cross. -->
                            <Path x:Name="ButtonPath"
                              Margin="3"
                              Stroke="{StaticResource TabItemCloseButtonNormalForegroundBrush}"
                              StrokeThickness="1.5"
                              StrokeStartLineCap="Square"
                              StrokeEndLineCap="Square"
                              Stretch="Uniform"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center" Width="10" Height="10" Data="M0,0 L25,25 M0,25 L25,0"/>
                        </Grid>

                        <!-- The triggers. -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{DynamicResource TabItemCloseButtonHoverBackgroundBrush}" />
                                <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{DynamicResource TabItemCloseButtonHoverForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{DynamicResource TabItemCloseButtonPressedBackgroundBrush}" />
                                <Setter TargetName="backgroundEllipse" Property="Stroke"
                                    Value="{DynamicResource TabItemCloseButtonPressedBorderBrush}" />
                                <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{DynamicResource TabItemCloseButtonPressedForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="EditMouseOverBrush" Color="#FF3B78FB" />
        <SolidColorBrush x:Key="BrushEditMousePress" Color="#FF04049B" />
        <Style x:Key="ButtonStyleEdit" TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels" Value="false" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Focusable" Value="False" />

            <!-- The control template. -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent">

                            <!-- The background of the button, as an ellipse. -->
                            <Ellipse x:Name="backgroundEllipse" />

                            <!-- A path that renders a cross. -->
                            <Image Source="/NOVISION Designer;component/Icons/Edit-25.png" Width="10" Height="10" />
                        </Grid>

                        <!-- The triggers. -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource EditMouseOverBrush}" />

                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource BrushEditMousePress}" />

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <RadialGradientBrush x:Key="Brush2">
            <GradientStop Color="#FF272727" Offset="1"/>
            <GradientStop Color="#FF292828"/>
        </RadialGradientBrush>
        <Color x:Key="ColorGlow">#FF51EAFF</Color>
        <Style x:Key="ButtonGlowNew" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle StrokeDashArray="1 2" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="True" Margin="2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="#FF20ACEE"/>
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="FontSize" Value="11"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="16,4"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border x:Name="border" CornerRadius="4" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Border x:Name="border_glow" CornerRadius="4" BorderThickness="0">
                                <Border.Effect>
                                    <DropShadowEffect x:Name="drop_efect_glow" Color="{DynamicResource ColorGlow}" ShadowDepth="0"/>
                                </Border.Effect>
                                <Border.BorderBrush>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#FF84C6FD" Offset="0"/>
                                        <GradientStop Color="#FF00B9FF" Offset="1"/>
                                    </RadialGradientBrush>
                                </Border.BorderBrush>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource gradientbackground}"/>-->
                                <Setter Property="BorderThickness" TargetName="border_glow" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.23"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource gradientbackground_pressed}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ForceCursor" Value="True"/>
        </Style>
        
    </Window.Resources>
    <Border ClipToBounds="True" BorderBrush="#FFEDEDED" BorderThickness="1">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="70"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <HalconDotNet:HWindowControlWPF x:Name="window_display"  HInitWindow="window_display_HInitWindow" Loaded="window_display_Loaded" ImagePart="0,0,1366,768" Grid.Column="1" Grid.Row="1" Margin="5"/>
            <Border Grid.ColumnSpan="2" Grid.RowSpan="2"/>

            <Border Grid.Row="1" BorderBrush="#FFEDEDED" BorderThickness="0,0,1,0" Background="#FFF7F7F7">

                <StackPanel Orientation="Vertical" Margin="2,5,0,0">
                    <Grid Margin="0,2,5,2">
                        <Label Content="Region Name" HorizontalAlignment="Left" Margin="5,0,0,0" />
                        <Border Margin="100,0,0,0" BorderBrush="#FFD7D7D7" CornerRadius="5" BorderThickness="1" Background="White" >
                            <TextBox x:Name="txt_name" Text="{Binding Name}" BorderThickness="0" BorderBrush="{x:Null}"  Background="#00000000" Style="{DynamicResource TextBoxStyleRoundNew}" Height="20"/>
                        </Border>
                    </Grid>
                    <Grid Margin="0,2,5,2">

                        <xctk:ColorPicker x:Name="color_picker" SelectedColor="{Binding Color, Converter={StaticResource StringToColor}}" Margin="100,0,0,0" BorderBrush="#FFD7D7D7"/>
                        <Label x:Name="label1" Content="Color" HorizontalAlignment="Left" Margin="5,0,0,0"/>
                    </Grid>
                    <Label Content="Region list" Margin="5,0,0,0"/>
                    <ListBox x:Name="lst_region" Margin="5,2,5,0" SelectionChanged="lst_region_SelectionChanged" BorderThickness="1" MinHeight="100" BorderBrush="{x:Null}" Background="{x:Null}">
                        <!--<ListBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ListBoxItem}">

                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>

                            </Style.Resources>
                            <Style.Triggers>
                                <Trigger Property="IsSelected"  Value="true">
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                            </Style.Triggers>

                        </Style>

                    </ListBox.ItemContainerStyle>-->
                        <ListBox.Resources>
                            <Style TargetType="{x:Type ListBoxItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                            <Border x:Name="Bd"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Padding="{TemplateBinding Padding}"
                                                SnapsToDevicePixels="true" CornerRadius="5" Background="White" BorderThickness="2" >
                                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive"
                                                            Value="False" />
                                                        <Condition Property="IsSelected"
                                                            Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderBrush"
                                                        TargetName="Bd"
                                                        Value="#FF059ECB" />
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive"
                                                            Value="True" />
                                                        <Condition Property="IsSelected"
                                                            Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="BorderBrush"
                                                        TargetName="Bd"
                                                        Value="#FF059ECB" />
                                                </MultiTrigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="Bd" Property="BorderBrush" Value="#FF64D7F9" />
                                                </Trigger>

                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.Resources>
                        <ListBox.IsEnabled>
                            <Binding Converter="{StaticResource InverseBooleanConverter}" Path="IsDraw"/>
                        </ListBox.IsEnabled>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Border CornerRadius="5" Background="White">
                                    <Grid Height="30">
                                        <TextBlock Text="{Binding Name}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,0,0"/>
                                        <Button x:Name="btn_remove_item" Content="X" HorizontalAlignment="Right" VerticalAlignment="Center" FontFamily="Rockwell" FontSize="12" Margin="0,0,4,0" Click="btn_remove_Click" Width="20" Height="20" Style="{DynamicResource ButtonStyleRemoveItem}"/>
                                        <Button x:Name="btn_edit_item" Content="Edit" HorizontalAlignment="Right" VerticalAlignment="Center" FontFamily="Rockwell" FontSize="12" Margin="0,0,28,0" Width="20" Height="20" Click="btn_edit_Click" Style="{DynamicResource ButtonStyleEditItem}" Padding="2,0"/>

                                    </Grid>
                                </Border>


                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                    <Rectangle Fill="#FF979797" Opacity="0.32" Height="1" Margin="5,10"/>
                    <Grid x:Name="grid_draw" Visibility="{Binding IsDraw, Converter={StaticResource BooleanToVisibilityConverter}}" MinHeight="197">
                        <UniformGrid Margin="0,100,0,0" Columns="2" VerticalAlignment="Top">
                            <Button x:Name="btn_ok_region" Content="OK" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" VerticalAlignment="Bottom" Click="btn_ok_region_Click" Background="#FF01C285"  Height="40" Margin="5,0" />
                            <Button x:Name="btn_cancel_region" Content="CANCEL" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" Click="btn_cancel_region_Click" Height="40" Background="#FF878389"  Margin="5,0" />
                        </UniformGrid>
                        <Border Margin="5,5,5,0" VerticalAlignment="Top" BorderBrush="#FF4FA4B7" BorderThickness="2" CornerRadius="5" Background="#FFDCFAFF" Height="76" >
                            <TextBlock Text="Draw the region then press right mouse or click OK" FontSize="16" TextWrapping="WrapWithOverflow" Foreground="#FF0F5660" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="Times New Roman" Margin="5,0" TextOptions.TextHintingMode="Fixed" FontWeight="Bold" />
                        </Border>
                        <Button x:Name="btn_edit_point" VerticalAlignment="Bottom" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" Height="40" Width="150" Background="White"  Content="MODIFY POINT" Foreground="Black" Click="btn_edit_point_Click"></Button>
                    </Grid>
                </StackPanel>
            </Border>
            <Border Grid.ColumnSpan="2" BorderBrush="#FFEDEDED" BorderThickness="0,0,0,1" Margin="0" >
                <StackPanel Orientation="Horizontal" Background="White" IsEnabled="{Binding IsDraw, Converter={StaticResource InverseBooleanConverter}}">
                    <StackPanel Height="Auto" Orientation="Horizontal">
                        <TextBlock Text="Files:" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0" Foreground="#FFA6A6A6"/>
                        <Button x:Name="btn_export"  Click="btn_export_Click" Height="40" Width="120" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}"  Background="#FFF3F3F3" VerticalAlignment="Center">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/NOVISION Designer;component/NewUI/export-icon.png" Width="20" Height="20" Margin="10,0,0,0"/>
                                <TextBlock Text="Export" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0" FontSize="12"/>
                            </StackPanel>

                            <!--<Image Source="/NOVision;component/Icons/Save-64.png"></Image>-->

                        </Button>
                        <Button x:Name="btn_import" Click="btn_import_Click" Height="40" Width="120"  Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" Background="#FFF3F3F3" VerticalAlignment="Center">

                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/NOVISION Designer;component/NewUI/import-icon.png" Width="20" Height="20" Margin="10,0,0,0"/>
                                <TextBlock Text="Import" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0" FontSize="12"/>
                            </StackPanel>


                        </Button>
                    </StackPanel>
                    <Rectangle Width="1" Fill="#7F979797" Height="40" VerticalAlignment="Center" Opacity="0.5" Margin="10,0"/>
                    <StackPanel  Height="Auto" Orientation="Horizontal">
                        <Button x:Name="btn_draw_nurbs"  Height="40" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Click="btn_draw_nurbs_Click" Width="120" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" Background="#FFF3F3F3" >
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/NOVISION Designer;component/NewUI/poligon-icon@2x.png" Width="18" Height="18" Margin="10,0,0,0"/>
                                <TextBlock Text="Polygon" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0" FontSize="12"/>
                            </StackPanel>
                        </Button>
                        <Button x:Name="btn_draw_rectangle1" Height="40" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Click="btn_draw_rectangle1_Click"  Width="120" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" Background="#FFF3F3F3">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/NOVISION Designer;component/NewUI/rectangle-icon@2x.png" Width="18" Height="18" Margin="10,0,0,0"/>
                                <TextBlock Text="Rectangle" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0"/>
                            </StackPanel>
                        </Button>
                        <Button x:Name="btn_draw_rectangle2" Height="40" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Click="btn_draw_rectangle2_Click"  Width="160" Style="{DynamicResource ButtonStyleOfficeIconGlowActive}" Background="#FFF3F3F3" >
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/NOVISION Designer;component/NewUI/r-rectangle-icon@2x.png" Width="22" Height="22" Margin="10,0,0,0"/>
                                <TextBlock Text="Rotating Rectangle" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0" FontSize="12"/>
                            </StackPanel>
                        </Button>

                    </StackPanel>
                    <Rectangle Width="1" Fill="#7F979797" Height="40" VerticalAlignment="Center" Opacity="0.5" Margin="10,0"/>
                    <fluent:RibbonGroupBox Height="Auto" Header="Minus">
                        <fluent:Button x:Name="btn_draw_nurbs_minus" Height="Auto" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Padding="16" Click="btn_draw_nurbs_minus_Click" Header="Polygon" Width="80">
                            <fluent:Button.LargeIcon>
                                <Image Height="30" Width="30" Source="/NOVISION Designer;component/iOS_Icons/icons8-polygon.png"/>
                            </fluent:Button.LargeIcon>
                        </fluent:Button>
                        <fluent:Button x:Name="btn_draw_rectangle1_minus" Height="Auto" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Padding="16" Click="btn_draw_rectangle_minus_Click" Header="Rectangle" Width="80">
                            <fluent:Button.LargeIcon>
                                <Image Height="30" Width="30" Source="/NOVISION Designer;component/iOS_Icons/icons8-rectangle (1).png"/>
                            </fluent:Button.LargeIcon>
                        </fluent:Button>
                        <fluent:Button x:Name="btn_draw_rectangle2_minus" Height="Auto" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Padding="16" Click="btn_draw_rectangle2_minus_Click" Header="Rotating Rectangle" Width="80">
                            <fluent:Button.LargeIcon>
                                <Image x:Name="image1" Height="30" Width="30" Source="/NOVISION Designer;component/iOS_Icons/icons8-rectangle (1).png" RenderTransformOrigin="0.5,0.5">
                                    <Image.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="20"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Image.RenderTransform>
                                </Image>
                            </fluent:Button.LargeIcon>
                        </fluent:Button>

                    </fluent:RibbonGroupBox>
                    <fluent:RibbonGroupBox Header="Display" Height="Auto">
                        <fluent:Spinner Header="Width" Value="{Binding Width, ElementName=window_display}" />
                    </fluent:RibbonGroupBox>
                </StackPanel>
            </Border>
        </Grid>
    </Border>
</Window>
